name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0.0, v20.15.10
  workflow_dispatch:  # Allow manual triggering

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Stickier Note ${{ github.ref_name }}
          draft: true
          prerelease: false
          body: |
            Stickier Note ${{ github.ref_name }} Release
            
            ## What's Changed
            * Optimized application size (93% smaller!)
            * Improved performance
            * Better user experience
            
            ## Download the appropriate package for your platform
            
  build-macos:
    name: Build macOS
    needs: release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Import Code-Signing Certificates
        if: startsWith(github.ref, 'refs/tags/')
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain: build.keychain
          keychain-password: build.keychain
        continue-on-error: true
        
      - name: Build macOS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          # For notarization, if you have it set up
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          npm run build
          npx electron-builder --mac --publish always
          
  build-windows:
    name: Build Windows
    needs: release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Windows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}
        run: |
          npm run build
          npx electron-builder --win --publish always
          
  build-linux:
    name: Build Linux
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0 libxss1 libgconf-2-4 libgtk-3-0 libnotify-dev libatspi2.0-0
          
      - name: Build Linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npx electron-builder --linux --publish always
          
  finalize-release:
    name: Finalize Release
    needs: [release, build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Update Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const releaseId = '${{ needs.release.outputs.release_id }}';
              
              // Get release info to check all assets are uploaded
              const release = await github.rest.repos.getRelease({
                owner,
                repo,
                release_id: releaseId,
              });
              
              // Keep as draft for now, let the owner publish manually
              console.log(`Release ${{ github.ref_name }} created successfully with ${release.data.assets.length} assets.`);
              console.log(`Visit ${release.data.html_url} to publish the release.`);
            } catch (error) {
              core.setFailed(`Action failed with error: ${error}`);
            }